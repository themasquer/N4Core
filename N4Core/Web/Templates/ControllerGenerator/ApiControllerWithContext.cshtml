@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable
}
}
@using System.Collections.Generic;
@using System.Linq;

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using MediatR;
using Microsoft.EntityFrameworkCore;
@* @{
    if (Model.RequiredNamespaces != null)
    {
        var requiredNamespaces = Model.RequiredNamespaces as HashSet<string>;
        if (requiredNamespaces != null && requiredNamespaces.Count > 0)
        {
            var requiredNamespace = requiredNamespaces.First().Split('.')[0];
            string[] namespaces = { "Services", "Models" };
            for (int i = 0; i < namespaces.Length; i++)
            {
@:using @(requiredNamespace + "." + namespaces[i] + ";")
            }
        }
    }
} *@

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
}
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    public class @Model.ControllerName : ControllerBase
    {
        private readonly IMediator _mediator;

        public @(Model.ControllerName)(IMediator mediator)
        {
            _mediator = mediator;
        }

        // GET: @routePrefix
        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> Get()
        {
            var request = new @("Query" + Model.ModelTypeName + "Request()");
            request.SetMapperProfiles(new @(Model.ModelTypeName + "Profile()"));
            var response = await _mediator.Send(request);
            var list = await response.Data.ToListAsync();
            return Ok(list);
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        [AllowAnonymous]
        public async Task<IActionResult> Get(@primaryKeyShortTypeName id)
        {
            var request = new @("Query" + Model.ModelTypeName + "Request()");
            request.SetMapperProfiles(new @(Model.ModelTypeName + "Profile()"));
            var response = await _mediator.Send(request);
			var item = await response.Data.SingleOrDefaultAsync(r => r.Id == id);
            return Ok(item);
        }

		// POST: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        [AllowAnonymous]
        public async Task<IActionResult> Post(@("Create" + Model.ModelTypeName + "Request") request)
        {
            if (ModelState.IsValid)
            {
                request.SetMapperProfiles(new @(Model.ModelTypeName + "Profile()"));
                var response = await _mediator.Send(request);
                return Ok(response);
            }
            return BadRequest(ModelState);
        }

        // PUT: @routePrefix
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut]
        [AllowAnonymous]
        public async Task<IActionResult> Put(@("Update" + Model.ModelTypeName + "Request") request)
        {
            if (ModelState.IsValid)
            {
                request.SetMapperProfiles(new @(Model.ModelTypeName + "Profile()"));
                var response = await _mediator.Send(request);
                return Ok(response);
            }
            return BadRequest(ModelState);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        [AllowAnonymous]
        public async Task<IActionResult> Delete(@primaryKeyShortTypeName id)
        {
            var response = await _mediator.Send(new @("Delete" + Model.ModelTypeName + "Request(){ Id = id }"));
            return Ok(response);
        }
	}
}
